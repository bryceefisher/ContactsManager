// <auto-generated />
using System;
using ContactsManager.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactsManager.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231214195535_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContactsManager.Core.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Philippines"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "Thailand"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryName = "China"
                        },
                        new
                        {
                            CountryId = 5,
                            CountryName = "Palestinian Territory"
                        },
                        new
                        {
                            CountryId = 6,
                            CountryName = "China"
                        });
                });

            modelBuilder.Entity("ContactsManager.Core.Domain.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PersonName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("ReceiveNewsLetters")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TIN")
                        .HasColumnType("varchar(8)")
                        .HasColumnName("TaxIdentificationNumber");

                    b.HasKey("PersonId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TIN")
                        .IsUnique();

                    b.ToTable("People", null, t =>
                        {
                            t.HasCheckConstraint("CHK_TIN", "CHAR_LENGTH(TaxIdentificationNumber) = 8");
                        });

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Address = "4 Parkside Point",
                            CountryId = 1,
                            DateOfBirth = new DateTime(1989, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mwebsdale0@people.com.cn",
                            Gender = "Female",
                            PersonName = "Marguerite",
                            ReceiveNewsLetters = false
                        },
                        new
                        {
                            PersonId = 2,
                            Address = "6 Morningstar Circle",
                            CountryId = 2,
                            DateOfBirth = new DateTime(1990, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ushears1@globo.com",
                            Gender = "Female",
                            PersonName = "Ursa",
                            ReceiveNewsLetters = false
                        },
                        new
                        {
                            PersonId = 3,
                            Address = "73 Heath Avenue",
                            CountryId = 3,
                            DateOfBirth = new DateTime(1995, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fbowsher2@howstuffworks.com",
                            Gender = "Male",
                            PersonName = "Franchot",
                            ReceiveNewsLetters = true
                        });
                });

            modelBuilder.Entity("ContactsManager.Core.Domain.Entities.Person", b =>
                {
                    b.HasOne("ContactsManager.Core.Domain.Entities.Country", "Country")
                        .WithMany("People")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ContactsManager.Core.Domain.Entities.Country", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
